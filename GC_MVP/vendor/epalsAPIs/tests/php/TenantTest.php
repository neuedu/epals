<?php


require_once('testutility.php');
require_once('../../php/school.php');
require_once('../../php/course.php');
require_once('../../php/section.php');
require_once('../../php/graphmapper.php');
require_once('../../php/logger.php');


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-04 at 20:55:44.
 */
class TenantTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Tenant
     */
    protected $object;
   
    
    public function __construct($dataFile)
    {
        parent::__construct();
    }
    
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
       
     }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Tenant::add
     * @todo   Implement testAdd().
     * 
     */
    public function testAdd() {
        
        $tenanttoken = strtolower(TestUtility::getRamdomString(5));
          
        $t = new Tenant();
     
        $t->setDomain("$tenanttoken.test.com");
        $t->setEmailDomain("$tenanttoken.mail.test.com");
        $t->setPublished(false);
        $t->setName($tenanttoken."town");
        $result = $t->add();
        
        $this->assertEquals(1, $result->NodeId > 0);
        
        //Tenant is publised after default school is created
        $this->assertFalse($result->Published);
        
        return $tenanttoken;
        
    }

   
    /**
     * 
     * @covers Tenant::loadTenant
     * @todo   Implement testLoadTenant().
     * @depends testAdd
     * 
     */
    public function testLoadTenant($tenanttoken) {
        
        $t = new Tenant("$tenanttoken.test.com");
        $this->assertEquals("$tenanttoken.mail.test.com", $t->getEmailDomain());
        $this->assertTrue($t->getPublished());
        $this->assertEquals($tenanttoken."town", $t->getName());
        return $tenanttoken;
    }

    
    /**
     * @covers Tenant::update
     * @todo   Implement testUpdate().
     * @depends testLoadTenant 
     */
     public function testUpdate($tenanttoken) {
        // Remove the following lines when you implement this test.
        
        $t = new Tenant("$tenanttoken.test.com");
        $t->setDescription('New Description');
        $t->setName('Test Tenant');
        $result = $t->update();
        
        $this->assertEquals("New Description", $result->Description);
        $this->assertEquals("Test Tenant", $result->Name);
       
        return $tenanttoken;
     
    }     
   
    /**
     * @covers Tenant::setupDefaults
     * @todo   Implement testSetupDefaults().
     * @depends testAdd
     */
    public function testSetupDefaults($tenanttoken) {
        
        printf("Token: $tenanttoken ");
        $gm = new GraphMapper("$tenanttoken.test.com");
        $t = new Tenant("$tenanttoken.test.com");
        $t->setupDefaults();
        
        $school = new School("$tenanttoken.test.com", $gm->getDefaultSchool());
        $this->assertNotEmpty($school->getId());
        
        
        $course = new Course("$tenanttoken.test.com", $gm->getDefaultSchool(), $gm->getDefaultCourse());
        $this->assertNotEmpty($course->getTitle());
        
        $course = new Section("$tenanttoken.test.com", $gm->getDefaultSchool(), $gm->getDefaultCourse(), $gm->getDefaultSection());
        $this->assertNotEmpty($course->getSectionId());
        

    }
    
}
