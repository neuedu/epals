<?php

require_once('../../php/group.php');
require_once('../../php/tenant.php');
require_once('../../php/user.php');
require_once('../../php/graphmapper.php');
require_once('testutility.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-05 at 19:19:48.
 */
class GroupTest extends PHPUnit_Framework_TestCase {

    private $graphmapper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->graphmapper = new GraphMapper();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Group::add
     * @todo   Implement testAdd().
     */
    public function testAdd() {

        $tenanttoken = strtolower(TestUtility::generateRandomString(5));

        $t = new Tenant();

        $t->setDomain("$tenanttoken.test.com");
        $t->setEmailDomain("$tenanttoken.mail.test.com");
        $t->setPublished('false');
        $t->setName($tenanttoken."town");
        $result = $t->add();
        $this->assertEquals(1, $result->NodeId > 0);


        $tenantDomain = "$tenanttoken.test.com";

        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $result = $group->add($tenantDomain);

        $this->assertTrue(!empty($result));

        return $tenanttoken;
    }

    
    
    /**
     * @covers Group::add
     * @todo   Implement testAddChildGroup().
     * @depends testAdd
     */
     public function testAddChildGroup($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";

        $group = new Group();
        $group->setName($tenanttoken . "_Parent_Tenant_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $parentuuid = $group->add($tenantDomain);

        $this->assertTrue(!empty($parentuuid));
        
        
        $group = new Group();
        $group->setName($tenanttoken . "_Parent_Tenant_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $childuuid = $group->add($tenantDomain, NULL, NULL, $parentuuid);

        $this->assertTrue(!empty($childuuid));
        

        return $tenanttoken;
    
        
        
     }
     
     
     
     /**
     * @covers Group::add
     * @todo   Implement testAddChildGroupWithPermission().
     * @depends testAdd
     */
     public function testAddChildGroupWithPermission($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";

        $group = new Group();
        $group->setName($tenanttoken . "_Parent_Tenant_Group2");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $parentuuid = $group->add($tenantDomain);

        $this->assertTrue(!empty($parentuuid));
        
        
        $group = new Group();
        $group->setName($tenanttoken . "_Parent_Tenant_Group2");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $childuuid = $group->add($tenantDomain, NULL, NULL, $parentuuid, 'Owner');

        $this->assertTrue(!empty($childuuid));
        

        return $tenanttoken;
    
        
        
     }
    
        
     /**
     * @covers Group::update
     * @todo   Implement testUpdate().
     * @depends testAdd
     */
     public function testUpdate($tenanttoken) {

          $tenantDomain = "$tenanttoken.test.com";
         
          $group1 = new Group();
          $group1->setName($tenanttoken . "_School_Group1");
          $group1->setExternalId('ExternalId');
          $group1->setStatus("Completed");
          $group1->setDescription('Descrption');
          $group1uuid = $group1->add($tenantDomain);

          $this->assertTrue(!empty($group1uuid));
       
          $group1->setStatus("InProgress");
          $group1->setDescription("Descrption1");
          $group1->update();
          
          $group = new Group($group1uuid);
          
          $this->assertEquals("InProgress", $group->getStatus());
          $this->assertEquals("Descrption1", $group->getDescription());
          
     }
    
       
    
    
    
    /**
     * @covers Group::add
     * @todo   Implement testAdd().
     * @depends testAdd
     */
    public function testAddGroupToSchool($tenanttoken) {


        $tenantDomain = "$tenanttoken.test.com";
        $schoolId = $this->graphmapper->getDefaultSchool();

        $group = new Group();
        $group->setName($tenanttoken . "_School_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $result = $group->add($tenantDomain, $schoolId);

        $this->assertTrue(!empty($result));
    }

    /**
     * @covers Group::add
     * @todo   Implement testAdd().
     * @depends testAdd
     * 
     */
    public function testAddGroupToTeachersGroupInTenant($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";
        $schoolId = $this->graphmapper->getDefaultSchool();
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        $group = new Group();
        $group->setName($tenanttoken . "_School_TeachersGroup_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $result = $group->add($tenantDomain, $schoolId, $teachersGroupName);

        $this->assertTrue(!empty($result));
    }

    /**
     * @covers Group::addHost
     * @todo   Implement testAddHost().
     * @depends testAdd
     * 
     */
    public function testAddAssistant($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student1_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student1_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student1_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S1");
        $s1->setFirstName("FName1");
        $s1->setLastName("LName1");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Educator');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        
        $tenantDomain = "$tenanttoken.test.com";
        //$schoolId = $this->graphmapper->getDefaultSchool();
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        $res = $group->addAssistant("student1_$tenanttoken@$tenanttoken.test.com");
        
        $this->assertTrue(!empty($res->Id));
        
        
    }
    
    
    /**
     * @covers Group::addMember
     * @todo   Implement testAddMember().
     * @depends testAdd
     * 
     */
    public function testAddMember($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student2_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student2_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student2_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S2");
        $s1->setFirstName("FName2");
        $s1->setLastName("LName2");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Student');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        $tenantDomain = "$tenanttoken.test.com";
        //$schoolId = $this->graphmapper->getDefaultSchool();
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group1");
        $group->setExternalId('ExternalId');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
        $ngroup = new Group($groupuuid);
        $result2 = $ngroup->addMember("student2_$tenanttoken@$tenanttoken.test.com");
        
        $this->assertTrue(!empty($result2->Id));
        
    }
    
    
     /**
     * @covers Group::addObserver
     * @todo   Implement testAddObserver().
     * @depends testAdd
     * 
     */
    public function testAddObserver($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student3_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student3_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student3_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S3");
        $s1->setFirstName("FName3");
        $s1->setLastName("LName3");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Educator');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
        $ngroup = new Group($groupuuid);
        $result2 = $ngroup->addObserver("student3_$tenanttoken@$tenanttoken.test.com");
        
        $this->assertTrue(!empty($result2->Id));
        
    }
    
    
     /**
     * @covers Group::addOwner
     * @todo   Implement testAddOwner().
     * @depends testAdd
     * 
     */
    public function addOwner($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student3_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student3_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student3_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S3");
        $s1->setFirstName("FName3");
        $s1->setLastName("LName3");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Educator');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
        $ngroup = new Group($groupuuid);
        $result2 = $ngroup->addOwner("student3_$tenanttoken@$tenanttoken.test.com");
        
        $this->assertTrue(!empty($result2->Id));
        
    }
    
    
     /**
     * @covers Group::getMembers
     * @todo   Implement testGetMembers().
     * @depends testAdd
     * 
     */
    public function testGetMembers($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student4_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student4_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student4_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S4");
        $s1->setFirstName("FName4");
        $s1->setLastName("LName4");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Educator');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addMember("student4_$tenanttoken@$tenanttoken.test.com");
        
        $members = $ngroup->getMembers();
      
        $this->assertEquals(1, count($members));
        $this->assertTrue( in_array("student4_$tenanttoken@$tenanttoken.test.com", $members));
        
        return $groupuuid;
    }
    
    
    
     /**
     * @covers Group::getMembers
     * @todo   Implement testGetMembers().
     * @depends testAdd
     * 
     */
    public function testGetOwners($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student5_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student5_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student5_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S5");
        $s1->setFirstName("FName5");
        $s1->setLastName("LName5");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Educator');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group5");
        $group->setExternalId('ExternalId5');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addOwner("student5_$tenanttoken@$tenanttoken.test.com");
        
        $members = $ngroup->getOwners();
      
        $this->assertEquals(1, count($members));
        $this->assertTrue( in_array("student5_$tenanttoken@$tenanttoken.test.com", $members));
        
        return $groupuuid;
    }
    
    
    
     /**
     * @covers Group::isMember
     * @todo   Implement testGetMembers().
     * @depends testAdd
     * 
     */
     public function testIsMember($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addMember("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addMember("student2_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addMember("student3_$tenanttoken@$tenanttoken.test.com");
         
         $this->assertTrue($ngroup->isMember("student1_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isMember("student2_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isMember("student3_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue(!$ngroup->isMember("student4_$tenanttoken@$tenanttoken.test.com"));
     }
    
     
      /**
     * @covers Group::isMember
     * @todo   Implement testGetHosts().
     * @depends testAdd
     * 
     */
     public function testIsAssistant($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addAssistant("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addAssistant("student2_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addAssistant("student3_$tenanttoken@$tenanttoken.test.com");
         
         $this->assertTrue($ngroup->isAssistant("student1_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isAssistant("student2_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isAssistant("student3_$tenanttoken@$tenanttoken.test.com"));
         $this->assertFalse($ngroup->isAssistant("student4_$tenanttoken@$tenanttoken.test.com"));
     }
    
     
      /**
     * @covers Group::isObserver
     * @todo   Implement testGetObservers().
     * @depends testAdd
     * 
     */
     public function testIsObserver($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addObserver("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addObserver("student2_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addObserver("student3_$tenanttoken@$tenanttoken.test.com");
         
         $this->assertTrue($ngroup->isObserver("student1_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isObserver("student2_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isObserver("student3_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue(!$ngroup->isObserver("student4_$tenanttoken@$tenanttoken.test.com"));
     }
     
    
       /**
     * @covers Group::isOwner
     * @todo   Implement testIsOwner().
     * @depends testAdd
     * 
     */
     public function testIsOwner($tenanttoken) {

        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addOwner("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addOwner("student2_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addOwner("student3_$tenanttoken@$tenanttoken.test.com");
         
         $this->assertTrue($ngroup->isOwner("student1_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isOwner("student2_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue($ngroup->isOwner("student3_$tenanttoken@$tenanttoken.test.com"));
         $this->assertTrue(!$ngroup->isOwner("student4_$tenanttoken@$tenanttoken.test.com"));
     }
     
     
     
     /**
     * @covers Group::getObservers
     * @todo   Implement testGetObservers().
     * @depends testAdd
     * 
     */
    public function testGetObservers($tenanttoken) {

        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addObserver("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addObserver("student2_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addObserver("student3_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addObserver("student4_$tenanttoken@$tenanttoken.test.com");
        
        $members = $ngroup->getObservers();
        
        $this->assertEquals(4, count($members));
        $this->assertTrue( in_array("student4_$tenanttoken@$tenanttoken.test.com", $members));
        
    }
    
    /**
     * @covers Group::getAssistants
     * @todo   Implement testgetAssistants().
     * @depends testAdd
     * 
     */
    public function testgetAssistants($tenanttoken) {

        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group2");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addAssistant("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addAssistant("student2_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addAssistant("student3_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addAssistant("student4_$tenanttoken@$tenanttoken.test.com");
        
        $members = $ngroup->getAssistants();
        
        $this->assertEquals(4, count($members));
        $this->assertTrue( in_array("student4_$tenanttoken@$tenanttoken.test.com", $members));
     
        $ngroup->setStatus('InProgress');
        $r = $ngroup->update();
        $this->assertTrue(!empty($r));
        
        
        return $tenanttoken;
    }
    
    
    /**
     * @covers Group::getGroupUsers
     * @todo   Implement testGetGroupUsers().
     * @depends testAdd
     * 
     */
    public function testGetGroupUsers($tenanttoken) {

        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        
        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group3");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addAssistant("student1_$tenanttoken@$tenanttoken.test.com");
         
         $members = $ngroup->getGroupUsers();
        
        $this->assertEquals(1, count($members));
        
        $this->assertEquals("student1_$tenanttoken@$tenanttoken.test.com", $members[0]["AccountId"]);
        $this->assertEquals("Assistant", $members[0]["GroupRole"]);
        
        return $tenanttoken;
    }
    
    
      /**
     * @covers Group::removeMembership
     * @todo   Implement testRemoveMembership().
     * @depends testAdd
     * 
     */
    public function testRemoveMembership($tenanttoken) {

        
        $tenantDomain = "$tenanttoken.test.com";
        $teachersGroupName = $this->graphmapper->getDefaultSection();

        // Add Group
        $group = new Group();
        $group->setName($tenanttoken . "_Tenant_Group3");
        $group->setExternalId('ExternalId2');
        $group->setStatus('Completed');
        $group->setDescription('Descrption');
        $groupuuid = $group->add($tenantDomain, NULL, $teachersGroupName);

        $this->assertTrue(!empty($groupuuid));
        
        
       // adding User to Group
         $ngroup = new Group($groupuuid);
         $ngroup->addAssistant("student1_$tenanttoken@$tenanttoken.test.com");
         $ngroup->addAssistant("student2_$tenanttoken@$tenanttoken.test.com");
        
        $members = $ngroup->getAssistants();
        
        $this->assertEquals(2, count($members));
        $this->assertTrue( in_array("student1_$tenanttoken@$tenanttoken.test.com", $members));
     
       
        $ngroup->removeMembership("student1_$tenanttoken@$tenanttoken.test.com");
        $this->assertFalse($ngroup->isAssistant("student1_$tenanttoken@$tenanttoken.test.com"));
        
        return $tenanttoken;
    }
    
   
    
    
    /**
    * @covers User::getGroups
    * @todo   Implement testGetGroups().
    * @depends testGetHosts
    * 
    */
    public function testGetGroups($tenanttoken) {

        $teachersGroupName = $this->graphmapper->getDefaultSection();
        
        $user = new User("student1_$tenanttoken@$tenanttoken.test.com");
        
        $groups = $user->getGroups();
        
        $this->assertEquals(7, count($groups));
        
    }
    
    
    
    /**
     * @covers Group::delete
     * @todo   Implement testDelete().
     * @expectedException Exception
     * @depends testAdd
     */
     public function testDelete($tenanttoken) {

          $tenantDomain = "$tenanttoken.test.com";
         
          $group1 = new Group();
          $group1->setName($tenanttoken . "_School_Group1");
          $group1->setExternalId('ExternalId');
          $group1->setStatus('Completed');
          $group1->setDescription('Descrption');
          $group1uuid = $group1->add($tenantDomain);

          $this->assertTrue(!empty($group1uuid));
       
          $result = $group1->delete();
          
          $group = new Group($group1uuid);
          
     }
     
    
}
