<?php


require_once("../../php/teacher.php");
require_once("../../php/student.php");
require_once('testutility.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-06 at 16:55:54.
 */
class TeacherTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Teacher
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Teacher;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Teacher::setRoles
     * @todo   Implement testSetRoles().
     * @expectedException Exception
     */
    public function testSetRoles() {
       
        $t = new Teacher();
        $role = array('Teacher');
        $t->setRoles($role);
    }

    /**
     * @covers Teacher::setRawDob
     * @todo   Implement testSetRawDob().
     * @expectedException Exception
     */
    public function testSetRawDob() {
        
        $t = new Teacher();
        $t->setRawDob('1993-02-01');
        
    }

    /**
     * @covers Teacher::setGrade
     * @todo   Implement testSetGrade().
     * @expectedException Exception
     */
    public function testSetGrade() {
        
        $t = new Teacher();
        $t->setGrade('11');
        
    }

    
    /**
     * @covers Teacher::add
     * @todo   Implement testAdd().
     */
    public function testAdd() {
       
        
        $tenanttoken = strtolower(TestUtility::generateRandomString(5));

        $t = new Tenant();

        $t->setDomain("$tenanttoken.test.com");
        $t->setEmailDomain("$tenanttoken.mail.test.com");
        $t->setPublished('false');
        $t->setName($tenanttoken."town");
        $result = $t->add();
        $this->assertEquals(1, $result->NodeId > 0);


        // Add Student in Tenant
        $t1 = new Teacher();
        $t1->setAccount("teacher1_$tenanttoken@$tenanttoken.test.com");
        $t1->setEPalsEmail("teacher1_$tenanttoken@$tenanttoken.mail.test.com");
        $t1->setExternalEmail("teacher1_$tenanttoken@$tenanttoken.com");
        $t1->setUserId("T1");
        $t1->setFirstName("FName1");
        $t1->setLastName("LName1");
        $t1->setPassword("Password123");
        
        $result1 = $t1->add();
        
        $this->assertEquals(1, $result1->NodeId > 0);

        return $tenanttoken;
    }
    
   

    /**
     * @covers Teacher::addStudent
     * @todo   Implement testAddStudent().
     * @depends testAdd
     */
    public function testAddStudent($tenanttoken) {
        
        
        $t1 = new Teacher("teacher1_$tenanttoken@$tenanttoken.test.com");
        
        // Add Student in Tenant
        $s1 = new Student();
        $s1->setAccount("student1_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student1_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student1_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S1");
        $s1->setFirstName("FName1");
        $s1->setLastName("LName1");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        
        $result2 = $s1->add();
        $this->assertEquals(1, $result2->NodeId > 0);
        
        $result3 = $t1->addStudent("student1_$tenanttoken@$tenanttoken.test.com");
        
        $this->assertEquals("student1_$tenanttoken@$tenanttoken.test.com", $result3->StudentAccountId);
        $this->assertEquals("teacher1_$tenanttoken@$tenanttoken.test.com", $result3->ModeratorAccountId);
        
        return $tenanttoken;
        
        
    }

    /**
     * @covers Teacher::removeStudent
     * @todo   Implement testRemoveStudent().
     * @depends testAdd
     */
    public function testRemoveStudent($tenanttoken) {
       
         $t1 = new Teacher("teacher1_$tenanttoken@$tenanttoken.test.com");
       
         
        // Add Student in Tenant
        $s1 = new Student();
        $s1->setAccount("student2_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student2_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student2_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S2");
        $s1->setFirstName("FName2");
        $s1->setLastName("LName2");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960102");
        $s1->setGrade("12");
        
        $result2 = $s1->add();
        $this->assertEquals(1, $result2->NodeId > 0);
        
        $result3 = $t1->removeStudent("student2_$tenanttoken@$tenanttoken.test.com");
        
        $this->assertEquals("Success", $result3);
        
        return $tenanttoken;
        
        
    }

    

}
