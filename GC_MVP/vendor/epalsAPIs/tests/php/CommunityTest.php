<?php

require_once('../../php/community.php');
require_once('../../php/graphmapper.php');
require_once('testutility.php');


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-23 at 21:37:04.
 */
class communityTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }




    /**
     * @covers community::add
     * @todo   Implement testAdd().
     */
    public function testAdd() {
        
        
        $tenanttoken = strtolower(TestUtility::generateRandomString(5));

        $community = new Community();
        $community->setName("$tenanttoken Community");
        $community->setDescription("$tenanttoken description");
        $community->setSsorealm("http://$tenanttoken/sso/");
        
        $result = $community->add();
        
        $this->assertTrue(!empty($result));

        return $tenanttoken;
    }
    
    
    /**
     * @covers community::addTenant
     * @todo   Implement testAddTenant().
     * @depends testAdd
     */
    public function testAddTenant($tenanttoken) {
        
        $t = new Tenant();
     
        $t->setDomain("$tenanttoken.test.com");
        $t->setEmailDomain("$tenanttoken.mail.test.com");
        $t->setPublished(false);
        $t->setName($tenanttoken."town");
        $result = $t->add();
        $this->assertEquals(1, $result->NodeId > 0);
        
        $community = new Community();
        $community->setName("$tenanttoken Community2");
        $community->setDescription("$tenanttoken description2");
        $community->setSsorealm("https://$tenanttoken/sso2/");
        $result1 = $community->add();
        $this->assertNotEmpty($result1);
        
        $result2 = $community->addTenant("$tenanttoken.test.com");
        $this->assertNotEmpty($result2);
        
    }
    

    /**
     * @covers community::update
     * @todo   Implement testUpdate().
     * @depends testAdd
     */
    public function testUpdate($tenanttoken) {
        
        
        $community = new community(NULL, "$tenanttoken Community");
        $community->setName("$tenanttoken Community1");
        $community->setDescription("$tenanttoken description1");
        $community->setSsorealm("https://$tenanttoken/sso/");
        
        $result = $community->update();
        
        $this->assertEquals("$tenanttoken Community1", $result->Name);
        $this->assertEquals("$tenanttoken description1", $result->Description);
        $this->assertEquals("https://$tenanttoken/sso/", $result->SSORealm);
        
    }

    

}
