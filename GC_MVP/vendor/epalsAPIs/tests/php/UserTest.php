<?php

require_once('testutility.php');
require_once('../../php/user.php');
require_once('../../php/tenant.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-07 at 00:32:23.
 */
class UserTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers User::verifyPassword
     * @todo   Implement testVerifyPassword().
     */
    public function testVerifyPassword() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::userExists
     * @todo   Implement testUserExists().
     */
    public function testUserExists() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers User::add
     * @todo   Implement testAdd().
     */
    public function testAdd() {


        $tenanttoken = strtolower(TestUtility::generateRandomString(5));

        $t = new Tenant();

        $t->setDomain("$tenanttoken.test.com");
        $t->setEmailDomain("$tenanttoken.mail.test.com");
        $t->setPublished('false');
        $t->setName($tenanttoken."town");
        $result = $t->add();
        $this->assertEquals(1, $result->NodeId > 0);


        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student1_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student1_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student1_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S1");
        $s1->setFirstName("FName1");
        $s1->setLastName("LName1");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Student');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        return $tenanttoken;
    }

    /**
     * @covers User::add
     * @todo   Implement testAdd().
     * @depends testAdd
     * @expectedException Exception
     */
    public function testAddWithoutUserName($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User();
        //$s1->setAccount("student2_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student2_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student2_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S1");
        $s1->setFirstName("FName2");
        $s1->setLastName("LName2");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Student');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
       
        return $tenanttoken;
    }

    /**
     * @covers User::loadUser
     * @todo   Implement testLoadUser().
     * @depends testAdd
     */
    public function testLoadUser($tenanttoken) {

        $s1 = new User("student1_$tenanttoken@$tenanttoken.test.com");

        $this->assertEquals("student1_$tenanttoken@$tenanttoken.test.com", $s1->getAccount());
        $this->assertEquals("student1_$tenanttoken@$tenanttoken.mail.test.com", $s1->getEPalsEmail());
        $this->assertEquals("student1_$tenanttoken@$tenanttoken.com", $s1->getExternalEmail());
    }

    /**
     * @covers User::update
     * @todo   Implement testUpdate()
     * @depends testAdd
     */
    public function testUpdate($tenanttoken) {

        // Add Student in Tenant
        $s1 = new User("student1_$tenanttoken@$tenanttoken.test.com");
        // $s1->setAccount("student1_$tenanttoken@$tenanttoken.test.com");
         $s1->setEPalsEmail("student1a_$tenanttoken@$tenanttoken.mail.test.com");
         $s1->setExternalEmail("student1a_$tenanttoken@$tenanttoken.com");
         $s1->setUserId("S1a");
         $s1->setFirstName("FName1a");
         $s1->setLastName("LName1");
         $s1->setPassword("Password123");
         $s1->setRawDob("19970101");
         $s1->setGrade("12");
         $role1 = array('Educator');
         $s1->setRoles($role1);
         $result1= $s1->update();
         $this->assertEquals("S1a", $result1->ExternalId);
         $this->assertEquals("FName1a", $result1->FirstName);
         $this->assertEquals("LName1", $result1->LastName);
         $this->assertEquals("19970101", $result1->Rawdob);
         $this->assertEquals("12", $result1->Grade);
         $this->assertEquals("Educator", $result1->Roles[0]);
         $this->assertEquals("student1a_$tenanttoken@$tenanttoken.com", $result1->ExternalEmail);
         $this->assertEquals("student1a_$tenanttoken@$tenanttoken.mail.test.com", $result1->EPalsEmail);
         
        //  return $tenanttoken;
    }
    
    
    
    /**
     * @covers User::delete
     * @todo   Implement testDelete()
     * @depends testAdd
     */
    public function testDelete($tenanttoken) {

         // Add Student in Tenant
         $s1 = new User("student1_$tenanttoken@$tenanttoken.test.com");
         
         $result1= $s1->delete();
         
         $this->assertEquals("S1", $result1->ExternalId);
         $this->assertEquals("FName1a", $result1->FirstName);
         $this->assertEquals("LName1", $result1->LastName);
         $this->assertEquals("19970101", $result1->Rawdob);
         $this->assertEquals("12", $result1->Grade);
         $this->assertEquals("Educator", $result1->Roles[0]);
         $this->assertEquals("student1a_$tenanttoken@$tenanttoken.com", $result1->ExternalEmail);
         $this->assertTrue($result1->Disabled);
         
        //  return $tenanttoken;
    }

    
    /**
     * @covers User::retrive
     * @todo   Implement testEnable()
     * @depends testAdd
     */
    public function testRetrive($tenanttoken) {

         // Add Student in Tenant
         $s1 = new User("student1_$tenanttoken@$tenanttoken.test.com");
         
         $result1= $s1->retrive();
         
         $this->assertEquals("S1", $result1->ExternalId);
         $this->assertEquals("FName1a", $result1->FirstName);
         $this->assertEquals("LName1", $result1->LastName);
         $this->assertEquals("19970101", $result1->Rawdob);
         $this->assertEquals("12", $result1->Grade);
         $this->assertEquals("Educator", $result1->Roles[0]);
         $this->assertEquals("student1a_$tenanttoken@$tenanttoken.com", $result1->ExternalEmail);
         $this->assertFalse($result1->Disabled);
         
        //  return $tenanttoken;
    }
    
    
    /**
     * @covers User::updatePassword
     * @todo   Implement testUpdatePassword().
     * @depends testAdd
     */
    public function testUpdatePassword($tenanttoken) {


        $s1 = new User("student1_$tenanttoken@$tenanttoken.test.com");
        $result = $s1->updatePassword('Password443$');
        $this->assertEquals("success", strtolower($result));
    }
    
    /**
     * @covers User::getTeacherGroups
     * @todo   Implement testGetTeacherGroups().
     * @depends testAdd
     */
    public function testGetTeacherGroups($tenanttoken) {


        //$s1 = new User("student1_$tenanttoken@$tenanttoken.test.com");
        $s1 = new User('lucasg@smalltown.epals.com');
        
        $groups = $s1->getTeacherGroups();
        $this->assertEquals(1, count($groups));
    }

}
