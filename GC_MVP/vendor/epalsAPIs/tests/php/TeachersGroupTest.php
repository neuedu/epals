<?php


require_once('testutility.php');
require_once('../../php/logger.php');
require_once('../../php/teachersgroup.php');
require_once('../../php/user.php');
require_once('../../php/teacher.php');
require_once('../../php/tenant.php');



/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-10 at 21:25:19.
 */
class TeachersGroupTest extends PHPUnit_Framework_TestCase {

    /**
     * @var TeachersGroup
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new TeachersGroup;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers TeachersGroup::add
     * @todo   Implement testAdd().
     */
    public function testAdd() {
        
        $tenanttoken = strtolower(TestUtility::getRamdomString(5));
        
        $t = new Tenant();
     
        $t->setDomain("$tenanttoken.test.com");
        $t->setEmailDomain("$tenanttoken.mail.test.com");
        $t->setPublished(false);
        $t->setName($tenanttoken."town");
        $result = $t->add();
        $this->assertEquals(1, $result->NodeId > 0);
        
        
         $g1 = new TeachersGroup();
         $g1->setName($tenanttoken.'_Matias_Gray_Group');
         $result1 = $g1->add($t->getDomain());
         $this->assertTrue($result1->NodeId > 0);
         $this->assertEquals($tenanttoken.'_Matias_Gray_Group', $result1->ExternalId);
         
         return $tenanttoken;
    }

    /**
     * @covers TeachersGroup::addUserToGroup
     * @todo   Implement testAddUserToGroup().
     * @depends testAdd
     */
     public function testAddUserToGroup($tenanttoken) {
       
        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student1_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student1_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student1_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S1");
        $s1->setFirstName("FName1");
        $s1->setLastName("LName1");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Student');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        
        $t = new TeachersGroup($tenanttoken.".test.com", $tenanttoken.'_Matias_Gray_Group');
        $result2 = $t->addUserToGroup("student1_$tenanttoken@$tenanttoken.test.com", "Student");
        $this->assertEquals(1, $result2->NodeId > 0);
        
        return $tenanttoken;
      }

      
      
      /**
     * @covers TeachersGroup::getMembers
     * @todo   Implement testGetMembers().
     * @depends testAdd
     */
     public function testGetMembers($tenanttoken) {
       
        // Add Student in Tenant
        $s1 = new User();
        $s1->setAccount("student2_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("student2_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("student2_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("S1");
        $s1->setFirstName("FName1");
        $s1->setLastName("LName1");
        $s1->setPassword("Password123");
        $s1->setRawDob("19960101");
        $s1->setGrade("11");
        $role1 = array('Student');
        $s1->setRoles($role1);

        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        
        $t = new TeachersGroup($tenanttoken.".test.com", $tenanttoken.'_Matias_Gray_Group');
        $result2 = $t->addUserToGroup("student2_$tenanttoken@$tenanttoken.test.com", "Student");
        $this->assertEquals(1, $result2->NodeId > 0);
        
        $members = $t->getMembers();
        
        $this->assertTrue(in_array("student1_$tenanttoken@$tenanttoken.test.com" ,$members));
        
        return $tenanttoken;
      }
      
      
     /**
     * @covers TeachersGroup::isMember
     * @todo   Implement testIsMember().
     * @depends testAdd
     */
     public function testIsMember($tenanttoken) {
       
        $t = new TeachersGroup($tenanttoken.".test.com", $tenanttoken.'_Matias_Gray_Group');
        
        $this->assertTrue($t->isMember("student1_$tenanttoken@$tenanttoken.test.com"));
        
        return $tenanttoken;
      }
      
      
     /**
     * @covers TeachersGroup::getStudents
     * @todo   Implement testGetStudents().
     * @depends testAdd
     */
     public function testgetStudents($tenanttoken) {
       
        $t = new TeachersGroup($tenanttoken.".test.com", $tenanttoken.'_Matias_Gray_Group');
        
        $members = $t->getStudents();
        
        $this->assertTrue(in_array("student1_$tenanttoken@$tenanttoken.test.com" ,$members));
       
        return $tenanttoken;
      }
      
      
       /**
     * @covers TeachersGroup::getTeachers
     * @todo   Implement testGetTeachers().
     * @depends testAdd
     */
     public function testGetTeachers($tenanttoken) {
       
        // Add Student in Tenant
        $s1 = new Teacher();
        $s1->setAccount("teacher1_$tenanttoken@$tenanttoken.test.com");
        $s1->setEPalsEmail("teacher1_$tenanttoken@$tenanttoken.mail.test.com");
        $s1->setExternalEmail("teacher1_$tenanttoken@$tenanttoken.com");
        $s1->setUserId("T1");
        $s1->setFirstName("FName1");
        $s1->setLastName("LName1");
        $s1->setPassword("Password123");
        
        $result1 = $s1->add();
        $this->assertEquals(1, $result1->NodeId > 0);
        
        
        $t = new TeachersGroup($tenanttoken.".test.com", $tenanttoken.'_Matias_Gray_Group');
        $result2 = $t->addTeacherToGroup("teacher1_$tenanttoken@$tenanttoken.test.com", "Student");
        $this->assertEquals(1, $result2->NodeId > 0);
        
        $members = $t->getTeachers();
        
        $this->assertTrue(in_array("teacher1_$tenanttoken@$tenanttoken.test.com" ,$members));
        $this->assertEquals(1, count($members));
        
        return $tenanttoken;
      }
      
      
      
    /**
     * @covers TeachersGroup::removeUserFromGroup
     * @todo   Implement testRemoveUserFromGroup().
     * @depends testAddUserToGroup
     */
    public function testRemoveUserFromGroup($tenanttoken) {
        
        $t = new TeachersGroup($tenanttoken.".test.com", $tenanttoken.'_Matias_Gray_Group');
        $result2 = $t->removeUserFromGroup("student1_$tenanttoken@$tenanttoken.test.com", "Student");
        $this->assertEquals('Request completed sucessfully', $result2);
        
        
    }

    /**
     * @covers TeachersGroup::addTeacherToGroup
     * @todo   Implement testAddTeacherToGroup().
     */
    public function testAddTeacherToGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers TeachersGroup::removeTeacherToGroup
     * @todo   Implement testRemoveTeacherToGroup().
     */
    public function testRemoveTeacherToGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers TeachersGroup::addStudentToGroup
     * @todo   Implement testAddStudentToGroup().
     */
    public function testAddStudentToGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers TeachersGroup::removeStudentToGroup
     * @todo   Implement testRemoveStudentToGroup().
     */
    public function testRemoveStudentToGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
